/**
 * BBE-80.Integration test: Update training program's state
 * https://blumcorp.atlassian.net/browse/BBE-80
 */

// tests for settings
// Generated by serverless-mocha-plugin

const mod = require('../../functions/workout/updateWorkoutState/handler.js');
const mochaPlugin = require('serverless-mocha-plugin');
const Promise = require('bluebird');
const FactoryGirl = require('../factories/factories').promisify(Promise);
const wrapper = mochaPlugin.lambdaWrapper;
const _ = require('lodash');
const chai = require('chai');
const chaiSubset = require('chai-subset');
chai.use(chaiSubset);

const assert = chai.assert;
const faker = require('faker');

// const liveFunction = {
//   region: process.env.SERVERLESS_REGION,
//   lambdaFunction: process.env.SERVERLESS_PROJECT + '-settings',
// }

describe('Workout update', () => {
  const scope = {};
  before(done => {
//  wrapper.init(liveFunction); // Run the deployed lambda
    wrapper.init(mod);
    FactoryGirl.create('user')
      .then(user => {
        scope.user = user;
        return FactoryGirl.create('workoutWithoutUser', { user_id: user.id });
      })
      .then(workout => {
        scope.workout = workout;
        done()
      });
  });

  after(done => {
    FactoryGirl.cleanup(done);
  });

  it('should return validation error', done => {
    const requestParams = {
      date: 'INVALID DATE',
      status: 666,
      total_time: 'INVALID',
    };
    wrapper.run({
      principalId: `${scope.user.id}-1`,
      requestParams,
      workout_id: scope.workout.id,
    }, (err) => {
      try {
        err = JSON.parse(err);
        assert.isNotNull(err);
        assert.property(err, 'errors');
        assert.propertyVal(err, 'status', 422);
        assert.sameMembers(_.keys(err.errors), _.keys(requestParams));
        done();
      } catch (e) {
        done(new Error(e.message));
      }
    });
  });
  it('should change model fields', done => {
    const requestParams = {
      status: 2,
      total_time: 1231,
    };
    wrapper.run({
      principalId: `${scope.user.id}-1`,
      requestParams,
      workout_id: scope.workout.id,
    }, (err, data) => {
      try {
        assert.isNull(err);
        assert.isObject(data);
        assert.containSubset(data, requestParams);
        done();
      } catch (e) {
        done(new Error(e.message));
      }
    });
  });
});
